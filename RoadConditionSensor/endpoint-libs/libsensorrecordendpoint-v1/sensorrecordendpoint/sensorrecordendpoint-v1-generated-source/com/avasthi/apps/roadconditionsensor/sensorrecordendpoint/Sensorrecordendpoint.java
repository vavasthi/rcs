/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-11-22 19:59:01 UTC)
 * on 2013-11-30 at 06:21:26 UTC 
 * Modify at your own risk.
 */

package com.avasthi.apps.roadconditionsensor.sensorrecordendpoint;

/**
 * Service definition for Sensorrecordendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SensorrecordendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Sensorrecordendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.16.0-rc of the sensorrecordendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://road-condition-recorder-1970.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "sensorrecordendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Sensorrecordendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Sensorrecordendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "getSensorRecord".
   *
   * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
   * any optional parameters, call the {@link GetSensorRecord#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetSensorRecord getSensorRecord(java.lang.Long id) throws java.io.IOException {
    GetSensorRecord result = new GetSensorRecord(id);
    initialize(result);
    return result;
  }

  public class GetSensorRecord extends SensorrecordendpointRequest<com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord> {

    private static final String REST_PATH = "sensorrecord/{id}";

    /**
     * Create a request for the method "getSensorRecord".
     *
     * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
     * any optional parameters, call the {@link GetSensorRecord#execute()} method to invoke the remote
     * operation. <p> {@link GetSensorRecord#initialize(com.google.api.client.googleapis.services.Abst
     * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetSensorRecord(java.lang.Long id) {
      super(Sensorrecordendpoint.this, "GET", REST_PATH, null, com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetSensorRecord setAlt(java.lang.String alt) {
      return (GetSensorRecord) super.setAlt(alt);
    }

    @Override
    public GetSensorRecord setFields(java.lang.String fields) {
      return (GetSensorRecord) super.setFields(fields);
    }

    @Override
    public GetSensorRecord setKey(java.lang.String key) {
      return (GetSensorRecord) super.setKey(key);
    }

    @Override
    public GetSensorRecord setOauthToken(java.lang.String oauthToken) {
      return (GetSensorRecord) super.setOauthToken(oauthToken);
    }

    @Override
    public GetSensorRecord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetSensorRecord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetSensorRecord setQuotaUser(java.lang.String quotaUser) {
      return (GetSensorRecord) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetSensorRecord setUserIp(java.lang.String userIp) {
      return (GetSensorRecord) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetSensorRecord setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetSensorRecord set(String parameterName, Object value) {
      return (GetSensorRecord) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertSensorRecord".
   *
   * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
   * any optional parameters, call the {@link InsertSensorRecord#execute()} method to invoke the
   * remote operation.
   *
   * @param content the {@link com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord}
   * @return the request
   */
  public InsertSensorRecord insertSensorRecord(com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord content) throws java.io.IOException {
    InsertSensorRecord result = new InsertSensorRecord(content);
    initialize(result);
    return result;
  }

  public class InsertSensorRecord extends SensorrecordendpointRequest<com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord> {

    private static final String REST_PATH = "sensorrecord";

    /**
     * Create a request for the method "insertSensorRecord".
     *
     * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
     * any optional parameters, call the {@link InsertSensorRecord#execute()} method to invoke the
     * remote operation. <p> {@link InsertSensorRecord#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord}
     * @since 1.13
     */
    protected InsertSensorRecord(com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord content) {
      super(Sensorrecordendpoint.this, "POST", REST_PATH, content, com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord.class);
    }

    @Override
    public InsertSensorRecord setAlt(java.lang.String alt) {
      return (InsertSensorRecord) super.setAlt(alt);
    }

    @Override
    public InsertSensorRecord setFields(java.lang.String fields) {
      return (InsertSensorRecord) super.setFields(fields);
    }

    @Override
    public InsertSensorRecord setKey(java.lang.String key) {
      return (InsertSensorRecord) super.setKey(key);
    }

    @Override
    public InsertSensorRecord setOauthToken(java.lang.String oauthToken) {
      return (InsertSensorRecord) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertSensorRecord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertSensorRecord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertSensorRecord setQuotaUser(java.lang.String quotaUser) {
      return (InsertSensorRecord) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertSensorRecord setUserIp(java.lang.String userIp) {
      return (InsertSensorRecord) super.setUserIp(userIp);
    }

    @Override
    public InsertSensorRecord set(String parameterName, Object value) {
      return (InsertSensorRecord) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listSensorRecord".
   *
   * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
   * any optional parameters, call the {@link ListSensorRecord#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListSensorRecord listSensorRecord() throws java.io.IOException {
    ListSensorRecord result = new ListSensorRecord();
    initialize(result);
    return result;
  }

  public class ListSensorRecord extends SensorrecordendpointRequest<com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.CollectionResponseSensorRecord> {

    private static final String REST_PATH = "sensorrecord";

    /**
     * Create a request for the method "listSensorRecord".
     *
     * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
     * any optional parameters, call the {@link ListSensorRecord#execute()} method to invoke the
     * remote operation. <p> {@link ListSensorRecord#initialize(com.google.api.client.googleapis.servi
     * ces.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListSensorRecord() {
      super(Sensorrecordendpoint.this, "GET", REST_PATH, null, com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.CollectionResponseSensorRecord.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListSensorRecord setAlt(java.lang.String alt) {
      return (ListSensorRecord) super.setAlt(alt);
    }

    @Override
    public ListSensorRecord setFields(java.lang.String fields) {
      return (ListSensorRecord) super.setFields(fields);
    }

    @Override
    public ListSensorRecord setKey(java.lang.String key) {
      return (ListSensorRecord) super.setKey(key);
    }

    @Override
    public ListSensorRecord setOauthToken(java.lang.String oauthToken) {
      return (ListSensorRecord) super.setOauthToken(oauthToken);
    }

    @Override
    public ListSensorRecord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListSensorRecord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListSensorRecord setQuotaUser(java.lang.String quotaUser) {
      return (ListSensorRecord) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListSensorRecord setUserIp(java.lang.String userIp) {
      return (ListSensorRecord) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String cursor;

    /**

     */
    public java.lang.String getCursor() {
      return cursor;
    }

    public ListSensorRecord setCursor(java.lang.String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer limit;

    /**

     */
    public java.lang.Integer getLimit() {
      return limit;
    }

    public ListSensorRecord setLimit(java.lang.Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListSensorRecord set(String parameterName, Object value) {
      return (ListSensorRecord) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeSensorRecord".
   *
   * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
   * any optional parameters, call the {@link RemoveSensorRecord#execute()} method to invoke the
   * remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveSensorRecord removeSensorRecord(java.lang.Long id) throws java.io.IOException {
    RemoveSensorRecord result = new RemoveSensorRecord(id);
    initialize(result);
    return result;
  }

  public class RemoveSensorRecord extends SensorrecordendpointRequest<Void> {

    private static final String REST_PATH = "sensorrecord/{id}";

    /**
     * Create a request for the method "removeSensorRecord".
     *
     * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
     * any optional parameters, call the {@link RemoveSensorRecord#execute()} method to invoke the
     * remote operation. <p> {@link RemoveSensorRecord#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveSensorRecord(java.lang.Long id) {
      super(Sensorrecordendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveSensorRecord setAlt(java.lang.String alt) {
      return (RemoveSensorRecord) super.setAlt(alt);
    }

    @Override
    public RemoveSensorRecord setFields(java.lang.String fields) {
      return (RemoveSensorRecord) super.setFields(fields);
    }

    @Override
    public RemoveSensorRecord setKey(java.lang.String key) {
      return (RemoveSensorRecord) super.setKey(key);
    }

    @Override
    public RemoveSensorRecord setOauthToken(java.lang.String oauthToken) {
      return (RemoveSensorRecord) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveSensorRecord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveSensorRecord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveSensorRecord setQuotaUser(java.lang.String quotaUser) {
      return (RemoveSensorRecord) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveSensorRecord setUserIp(java.lang.String userIp) {
      return (RemoveSensorRecord) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveSensorRecord setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveSensorRecord set(String parameterName, Object value) {
      return (RemoveSensorRecord) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateSensorRecord".
   *
   * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
   * any optional parameters, call the {@link UpdateSensorRecord#execute()} method to invoke the
   * remote operation.
   *
   * @param content the {@link com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord}
   * @return the request
   */
  public UpdateSensorRecord updateSensorRecord(com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord content) throws java.io.IOException {
    UpdateSensorRecord result = new UpdateSensorRecord(content);
    initialize(result);
    return result;
  }

  public class UpdateSensorRecord extends SensorrecordendpointRequest<com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord> {

    private static final String REST_PATH = "sensorrecord";

    /**
     * Create a request for the method "updateSensorRecord".
     *
     * This request holds the parameters needed by the the sensorrecordendpoint server.  After setting
     * any optional parameters, call the {@link UpdateSensorRecord#execute()} method to invoke the
     * remote operation. <p> {@link UpdateSensorRecord#initialize(com.google.api.client.googleapis.ser
     * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param content the {@link com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord}
     * @since 1.13
     */
    protected UpdateSensorRecord(com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord content) {
      super(Sensorrecordendpoint.this, "PUT", REST_PATH, content, com.avasthi.apps.roadconditionsensor.sensorrecordendpoint.model.SensorRecord.class);
    }

    @Override
    public UpdateSensorRecord setAlt(java.lang.String alt) {
      return (UpdateSensorRecord) super.setAlt(alt);
    }

    @Override
    public UpdateSensorRecord setFields(java.lang.String fields) {
      return (UpdateSensorRecord) super.setFields(fields);
    }

    @Override
    public UpdateSensorRecord setKey(java.lang.String key) {
      return (UpdateSensorRecord) super.setKey(key);
    }

    @Override
    public UpdateSensorRecord setOauthToken(java.lang.String oauthToken) {
      return (UpdateSensorRecord) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateSensorRecord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateSensorRecord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateSensorRecord setQuotaUser(java.lang.String quotaUser) {
      return (UpdateSensorRecord) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateSensorRecord setUserIp(java.lang.String userIp) {
      return (UpdateSensorRecord) super.setUserIp(userIp);
    }

    @Override
    public UpdateSensorRecord set(String parameterName, Object value) {
      return (UpdateSensorRecord) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Sensorrecordendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Sensorrecordendpoint}. */
    @Override
    public Sensorrecordendpoint build() {
      return new Sensorrecordendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SensorrecordendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSensorrecordendpointRequestInitializer(
        SensorrecordendpointRequestInitializer sensorrecordendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(sensorrecordendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
